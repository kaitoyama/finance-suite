// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 会計5分類を ENUM 化してバリデーションを簡潔に
enum AccountCategory {
  ASSET // 資産
  LIABILITY // 負債
  EQUITY // 純資産
  REVENUE // 収益
  EXPENSE // 費用
}

/// システム利用者
model User {
  id                Int              @id @default(autoincrement())
  username          String           @unique
  isAdmin           Boolean          @default(false)
  // relations
  attachments       Attachment[]
  journalEntries    JournalEntry[]   @relation("createdBy")
  requestedExpenses ExpenseRequest[] @relation("requester")
  approvedExpenses  ExpenseRequest[] @relation("approver")
  invoices          Invoice[]        @relation("UserInvoices")
}

/// 勘定科目（科目コード＋名称＋分類）
model Account {
  id           Int             @id @default(autoincrement())
  code         String          @unique
  name         String
  category     AccountCategory
  // relations
  journalLines JournalLine[]
  legacyBudgets LegacyBudget[]
  expenses     ExpenseRequest[] @relation("ExpenseAccount")
}

/// 予算カテゴリ（支出の分類）
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relations
  budgets     Budget[]
  expenses    ExpenseRequest[] @relation("ExpenseCategory")
}

/// 予算（年度別・カテゴリ別）
model Budget {
  id        Int      @id @default(autoincrement())
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  fiscalYear Int // e.g. 2025
  amountPlanned Decimal @db.Decimal(12, 2)
  createdAt DateTime @default(now())

  @@unique([categoryId, fiscalYear])
}

/// 旧予算テーブル（後方互換性のため残す）
model LegacyBudget {
  id        Int      @id @default(autoincrement())
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int
  fiscalYear Int // e.g. 2025
  amountPlanned Decimal @db.Decimal(12, 2)
  createdAt DateTime @default(now())

  @@unique([accountId, fiscalYear])
  @@map("Budget_old")
}

/// 添付ファイル（証憑）メタ情報
model Attachment {
  id        Int      @id @default(autoincrement())
  s3Key     String
  title     String
  amount    Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())

  /// アップロード者
  uploader   User @relation(fields: [uploaderId], references: [id])
  uploaderId Int

  /// （後続実装予定）申請レコードに 1:1 紐づく
  expenseRequest   ExpenseRequest? @relation("ExpenseAttachment")
  expenseRequestId Int?            @unique

  payments PaymentAttachment[]
}

/// 仕訳伝票ヘッダ
model JournalEntry {
  id          Int           @id @default(autoincrement())
  datetime    DateTime      @default(now())
  description String?
  // 起票者
  createdBy   User          @relation("createdBy", fields: [createdById], references: [id])
  createdById Int
  // 明細行
  lines       JournalLine[]
  // 請求書
  Invoice     Invoice?
}

/// 仕訳明細行（借方 or 貸方のいずれかに金額を入れる）
model JournalLine {
  id        Int          @id @default(autoincrement())
  entry     JournalEntry @relation(fields: [entryId], references: [id])
  entryId   Int
  account   Account      @relation(fields: [accountId], references: [id])
  accountId Int
  debit     Decimal?     @db.Decimal(12, 2)
  credit    Decimal?     @db.Decimal(12, 2)
}

/// 申請→承認→支払ステート用モデル（予定）
model ExpenseRequest {
  id           Int          @id @default(autoincrement())
  amount       Decimal      @db.Decimal(12, 2)
  state        RequestState @default(DRAFT)
  createdAt    DateTime     @default(now())
  approvedAt   DateTime?
  description  String?      // 支出の説明
  // relations
  attachment   Attachment   @relation("ExpenseAttachment", fields: [attachmentId], references: [id])
  attachmentId Int          @unique
  requester    User         @relation("requester", fields:[requesterId], references:[id])
  requesterId  Int
  approver     User?        @relation("approver",  fields:[approverId], references:[id])
  approverId   Int?
  payment      Payment?     @relation("ExpensePayment")
  paymentId    Int?
  account      Account?     @relation("ExpenseAccount", fields: [accountId], references: [id])
  accountId    Int?
  category     Category?    @relation("ExpenseCategory", fields: [categoryId], references: [id])
  categoryId   Int?
}

enum RequestState {
  DRAFT
  PENDING
  APPROVED
  PAID
  REJECTED
  CLOSED
}

enum InvoiceStatus {
  DRAFT
  UNPAID
  PARTIAL
  PAID
  OVERPAY
}

model Invoice {
  id          Int           @id @default(autoincrement())
  invoiceNo   String        @unique
  partnerName String
  amount      Float
  status      InvoiceStatus @default(UNPAID)
  pdfKey      String
  createdAt   DateTime      @default(now())
  createdById Int
  createdBy   User          @relation("UserInvoices", fields: [createdById], references: [id])
  dueDate     DateTime
  issueDate   DateTime      @default(now())
  description String?
  // Relation to JournalEntry (optional, if an invoice can be linked to a journal entry)
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  journalEntryId Int?          @unique

  updatedAt DateTime @updatedAt

  payments Payment[]
}

enum PaymentLabel {
  NORMAL
  PARTIAL
  OVERPAY
}

enum PaymentDirection {
  IN
  OUT
}

enum PaymentMethod {
  BANK
  CASH
  OTHER
}

model Payment {
  id        Int      @id @default(autoincrement())
  paidAt    DateTime @default(now())
  amount    Decimal  @db.Decimal(12, 2)
  label     PaymentLabel
  overpaidAmount Decimal? @db.Decimal(12, 2)
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?

  // New fields for Payment model
  direction PaymentDirection
  method    PaymentMethod
  expenseRequest   ExpenseRequest? @relation("ExpensePayment", fields: [expenseRequestId], references: [id])
  expenseRequestId Int?            @unique
  attachments      PaymentAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentAttachment {
  paymentId    Int
  attachmentId Int
  payment      Payment    @relation(fields: [paymentId], references: [id])
  attachment   Attachment @relation(fields: [attachmentId], references: [id])

  @@id([paymentId, attachmentId])
}
