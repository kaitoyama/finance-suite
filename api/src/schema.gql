# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Voucher {
  """Example field (placeholder)"""
  exampleField: Int!
}

type MeDto {
  username: String!
  isAdmin: Boolean!
}

type PresignedPayloadField {
  key: String!
  value: String!
}

type PresignedPayload {
  url: String!
  fields: [PresignedPayloadField!]!
  objectKey: String!
}

type Attachment {
  id: Int!
  s3Key: String!
  title: String!
  amount: Float!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: ID!
  username: String!
  isAdmin: Boolean!
}

type Account {
  id: ID!
  code: String!
  name: String!
  category: AccountCategory!
}

enum AccountCategory {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

type JournalLine {
  id: ID!
  accountId: Int!
  account: Account
  debit: Float
  credit: Float
}

type JournalEntry {
  id: ID!
  datetime: DateTime!
  description: String
  createdById: Int!
  createdBy: User
  lines: [JournalLine]
}

type GenerateInvoicePdfPayload {
  pdfKey: String!
  presignedUrl: String!
}

type Invoice {
  id: Int!
  invoiceNo: String!
  partnerName: String!
  amount: Float!
  status: InvoiceStatus!
  pdfKey: String!
  createdAt: DateTime!
  dueDate: DateTime!
  description: String
}

enum InvoiceStatus {
  DRAFT
  UNPAID
  PARTIAL
  PAID
  OVERPAY
}

type Payment {
  id: Int!
  paidAt: DateTime!
  amount: Float!
  label: PaymentLabel!
  invoice: Invoice
  invoiceId: Int
}

enum PaymentLabel {
  NORMAL
  PARTIAL
  OVERPAY
}

type BudgetBalance {
  accountId: Int!
  accountCode: String!
  accountName: String!
  planned: Float!
  actual: Float!
  remaining: Float!

  """Consumption ratio 0.00–1.00"""
  ratio: Float!
}

type BudgetDto {
  id: Int!
  accountId: Int!
  fiscalYear: Int!
  amountPlanned: Float!
  createdAt: DateTime!
}

type Query {
  """Health-check"""
  hello: String!
  getPresignedS3Url(key: String!): String
  vouchers: [Voucher!]!
  voucher(id: Int!): Voucher!

  """現在のユーザーを返す"""
  me: MeDto!
  journalEntries(range: RangeInput): [JournalEntry!]!
  journalEntry(id: ID!): JournalEntry
  accounts: [Account!]!
  account(id: Int!): Account
  invoice(id: Int!): Invoice!
  invoices: [Invoice!]!
  payments: [Payment!]!
  payment(id: Int!): Payment
  listBudgetsByYear(fiscalYear: Int!): [BudgetDto!]!
  budgets(year: Int!): [BudgetBalance!]!
}

input RangeInput {
  startDate: DateTime
  endDate: DateTime
  searchTerm: String
}

type Mutation {
  createVoucher(createVoucherInput: CreateVoucherInput!): Voucher!
  updateVoucher(updateVoucherInput: UpdateVoucherInput!): Voucher!
  removeVoucher(id: Int!): Voucher!
  createPresignedPost(filename: String!): PresignedPayload!
  createAttachment(input: CreateAttachmentInput!): Attachment!
  createJournalEntry(createJournalEntryInput: CreateJournalEntryInput!): JournalEntry!
  updateJournalEntry(updateJournalEntryInput: UpdateJournalEntryInput!): JournalEntry!
  removeJournalEntry(id: ID!): JournalEntry
  createAccount(createAccountInput: CreateAccountInput!): Account!
  generateInvoicePdf(input: GenerateInvoicePdfInput!): GenerateInvoicePdfPayload!
  createInvoice(input: InvoiceInput!): Invoice!
  createPayment(createPaymentInput: CreatePaymentInput!): Payment!
  updatePayment(id: Int!, updatePaymentInput: UpdatePaymentInput!): Payment!
  removePayment(id: Int!): Payment!
  setBudget(input: BudgetInput!): BudgetDto!
}

input CreateVoucherInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateVoucherInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateAttachmentInput {
  s3Key: String!
  title: String!
  amount: Float!
}

input CreateJournalEntryInput {
  datetime: DateTime
  description: String
  lines: [JournalLineInput!]!
}

input JournalLineInput {
  accountId: Int!
  debit: Float
  credit: Float
}

input UpdateJournalEntryInput {
  datetime: DateTime
  description: String
  lines: [JournalLineInput!]
  id: ID!
}

input CreateAccountInput {
  code: String!
  name: String!
  category: AccountCategory!
}

input GenerateInvoicePdfInput {
  invoiceNo: String!
  partnerName: String!
  amount: Float!
  date: String!
  subjectText: String
  dueDateText: String
  itemDescriptionText: String
}

input InvoiceInput {
  partnerName: String!
  amount: Float!
  dueDate: String!
  description: String
}

input CreatePaymentInput {
  """ID of the invoice to associate this payment with"""
  invoiceId: Int

  """Date when the payment was made"""
  paidAt: DateTime!

  """Amount of the payment"""
  amount: Float!

  """Direction of the payment (IN/OUT)"""
  direction: PaymentDirection!

  """Method of the payment (BANK/CASH/OTHER)"""
  method: PaymentMethod!

  """ID of the expense request to associate this payment with"""
  expenseRequestId: Int

  """IDs of attachments to link to this payment"""
  attachmentIds: [Int]
}

"""Direction of the payment (IN/OUT)"""
enum PaymentDirection {
  IN
  OUT
}

"""Method of the payment (BANK/CASH/OTHER)"""
enum PaymentMethod {
  BANK
  CASH
  OTHER
}

input UpdatePaymentInput {
  """ID of the invoice to associate this payment with"""
  invoiceId: Int

  """Date when the payment was made"""
  paidAt: DateTime

  """Amount of the payment"""
  amount: Float

  """Direction of the payment (IN/OUT)"""
  direction: PaymentDirection

  """Method of the payment (BANK/CASH/OTHER)"""
  method: PaymentMethod

  """ID of the expense request to associate this payment with"""
  expenseRequestId: Int

  """IDs of attachments to link to this payment"""
  attachmentIds: [Int!]
}

input BudgetInput {
  accountId: Int!
  fiscalYear: Int!
  amountPlanned: Float!
}