import { graphql } from '../gql'; // Adjusted path assuming hooks are in src/hooks and gql is in src/gql
import { BudgetInput } from '../gql/graphql'; // Will be generated by codegen
import { useQuery, useMutation } from 'urql';

// Define the GraphQL query for fetching budgets
// The actual DocumentNode will be generated by graphql-codegen
const GetBudgetsQueryDocument = graphql(`
  query GetBudgets($year: Int!) {
    budgets(year: $year) {
      categoryId
      categoryName
      categoryDescription
      planned
      actual
      remaining
      ratio
    }
  }
`);

const SetBudgetMutationDocument = graphql(`
  mutation SetBudget($input: BudgetInput!) {
    setBudget(input: $input) {
      id
      categoryId
      fiscalYear
      amountPlanned
    }
  }
`);

// Custom hook to fetch budgets
export const useGetBudgets = (year: number | undefined) => {

  const [{data, fetching, error}, refetchBudgets] = useQuery({
    query: GetBudgetsQueryDocument,
    variables: { year: year! },
    pause: !year,
  });

  return {
    loading: fetching,
    error: error,
    budgets: data?.budgets,
    refetchBudgets,
  };
};

// Custom hook for setting budgets
export const useSetBudget = () => {
  const [, setBudgetMutation] = useMutation(SetBudgetMutationDocument);

  const setBudget = async (input: BudgetInput) => {
    const result = await setBudgetMutation({ input });
    return result;
  };

  return {
    setBudget,
  };
}; 